/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    CONFIGURATION FILE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    PARAMETERS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
params {
    max_memory = '16.GB'
    max_cpus   = 4
    max_time   =  '48h'
}



/*
  Define the environment and settings for the workflow.
  These settings can include paths to tools, memory and CPU requirements,
  container images, or any custom parameters.
*/

// Define the available profiles for different execution environments
profiles {
    
    // Debug profile for testing with additional debugging information
    debug {
        dumpHashes              = true    // Dump task hashes for debugging
        process.beforeScript    = 'echo $HOSTNAME'  // Print the hostname before each task starts
        cleanup                 = false   // Prevent automatic cleanup of working directories
        nextflow.enable.configProcessNamesValidation = true  // Validate process names in the config
    }

    // Profile for running with Conda
    conda {
        conda.enabled           = true    // Enable Conda for package management
        docker.enabled          = false   // Disable Docker
        singularity.enabled     = false   // Disable Singularity
        podman.enabled          = false   // Disable Podman
        shifter.enabled         = false   // Disable Shifter
        charliecloud.enabled    = false   // Disable Charliecloud
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']  // Conda channels to use
        apptainer.enabled       = false   // Disable Apptainer
    }

    // Profile for running with Mamba (faster Conda alternative)
    mamba {
        conda.enabled           = true    // Enable Conda
        conda.useMamba          = true    // Use Mamba instead of Conda
        docker.enabled          = false   // Disable Docker
        singularity.enabled     = false   // Disable Singularity
        podman.enabled          = false   // Disable Podman
        shifter.enabled         = false   // Disable Shifter
        charliecloud.enabled    = false   // Disable Charliecloud
        apptainer.enabled       = false   // Disable Apptainer
    }

    // Profile for running with Docker containers
    docker {
        docker.enabled          = true    // Enable Docker execution
        conda.enabled           = false   // Disable Conda
        singularity.enabled     = false   // Disable Singularity
        podman.enabled          = false   // Disable Podman
        shifter.enabled         = false   // Disable Shifter
        charliecloud.enabled    = false   // Disable Charliecloud
        apptainer.enabled       = false   // Disable Apptainer
        docker.runOptions       = '-u $(id -u):$(id -g)'  // Run as the current user to avoid permission issues
    }

    // Profile for running Docker on ARM architecture (e.g., Apple Silicon)
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'  // Force Docker to run on x86_64 architecture
    }

    // Profile for running with Singularity containers
    singularity {
        singularity.enabled     = true    // Enable Singularity execution
        singularity.autoMounts  = true    // Automatically mount required directories
        conda.enabled           = false   // Disable Conda
        docker.enabled          = false   // Disable Docker
        podman.enabled          = false   // Disable Podman
        shifter.enabled         = false   // Disable Shifter
        charliecloud.enabled    = false   // Disable Charliecloud
        apptainer.enabled       = false   // Disable Apptainer
    }

    // Profile for running with Podman containers
    podman {
        podman.enabled          = true    // Enable Podman execution
        conda.enabled           = false   // Disable Conda
        docker.enabled          = false   // Disable Docker
        singularity.enabled     = false   // Disable Singularity
        shifter.enabled         = false   // Disable Shifter
        charliecloud.enabled    = false   // Disable Charliecloud
        apptainer.enabled       = false   // Disable Apptainer
    }

    // Profile for running with Shifter containers
    shifter {
        shifter.enabled         = true    // Enable Shifter execution
        conda.enabled           = false   // Disable Conda
        docker.enabled          = false   // Disable Docker
        singularity.enabled     = false   // Disable Singularity
        podman.enabled          = false   // Disable Podman
        charliecloud.enabled    = false   // Disable Charliecloud
        apptainer.enabled       = false   // Disable Apptainer
    }

    // Profile for running with Charliecloud containers
    charliecloud {
        charliecloud.enabled    = true    // Enable Charliecloud execution
        conda.enabled           = false   // Disable Conda
        docker.enabled          = false   // Disable Docker
        singularity.enabled     = false   // Disable Singularity
        podman.enabled          = false   // Disable Podman
        shifter.enabled         = false   // Disable Shifter
        apptainer.enabled       = false   // Disable Apptainer
    }

    // Profile for running with Apptainer containers
    apptainer {
        apptainer.enabled       = true    // Enable Apptainer execution
        apptainer.autoMounts    = true    // Automatically mount required directories
        conda.enabled           = false   // Disable Conda
        docker.enabled          = false   // Disable Docker
        singularity.enabled     = false   // Disable Singularity
        podman.enabled          = false   // Disable Podman
        shifter.enabled         = false   // Disable Shifter
        charliecloud.enabled    = false   // Disable Charliecloud
    }

    // Profile for Wave execution
    wave {
        apptainer.ociAutoPull   = true    // Enable automatic pulling of OCI images for Apptainer
        singularity.ociAutoPull = true    // Enable automatic pulling of OCI images for Singularity
        wave.enabled            = true    // Enable Wave
        wave.freeze             = true    // Freeze environments to prevent changes during execution
        wave.strategy           = 'conda,container'  // Use Conda or containers as the execution strategy
    }

    // Profile for running on Gitpod (cloud-based dev environments)
    gitpod {
        executor.name           = 'local'   // Use local execution
        executor.cpus           = 4         // Number of CPUs to allocate
        executor.memory         = 8.GB      // Memory allocation
    }
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    REGISTRY SETTINGS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Define container registries for Apptainer, Docker, and Podman
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'



/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    THE END
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/